# Laboratorio 03-E: "Microservicios"
 
# Este laboratorio crearemos una aplicación el lenguaje Go. Esta app 
# la compilaremos en el mismo momento de generar la imagen de contenedor.
#
# La app levanta un servidor web que, si nos conectamos, nos responde indicando
# el nombre del host y las direcciones IPs que tiene asignada. 
#
# Posteriormente crearemos un servicio en Swarm para demostrar en balanceo.

# Requisitos:
#   Una máquina virtual con Ubuntu 20.04 LTS a la que poder hacer ssh.
#   Tener instalado Docker-ce en dicha máquina virtual.

##################################
# Ejercicio 1: Instalación de Go #
##################################

# Nos ponemos en HOME.

cd ~


# Descargamos el compilador de Go, lo descoprimimos, cambiamos propietario y lo movemos de carpeta

curl -O https://dl.google.com/go/go1.15.5.linux-amd64.tar.gz

tar xvf go1.15.5.linux-amd64.tar.gz

sudo chown -R root:root ./go

sudo mv go /usr/local


# Editamos '.profile' para agregar variables en entorno al final del archivo.

code .profile

# Agregar estas dos líneas al final del archivo:
# (OJO, retirar los caracteres '#')

# export GOPATH=$HOME/k8s_desarrolladores/03/work
# export PATH=$PATH:/usr/local/go/bin:$GOPATH/bin

# Guardar y salir.


# Cargamos el profile para que se actualicen las varibles de entorno.

source .profile


#######################################
# Ejercicio 2: Compilar una app en Go #
#######################################

# Editamos el archivo 'hello.go' que usaremos para probar el compilador.

code ~/k8s_desarrolladores/03/work/src/hello/hello.go


# Como se puede comprobar es un código sencillo que muestra el mensaje 'Hola Mundo!!!'

# Procedemos a compilarlo, indicando el nombre de la carpeta. Se procederá a compilar todos los
# archivos .go que existan (solo está 'hello.go')

go install hello


# Comprobamos si ha compilado escribiendo el nombre del ejecutable ('hello')

hello


# Para determinar la carpeta en la que Go coloca el ejecutable:

which hello


# Acabamos de comprobar que el compilador de Go funciona. Procedemos a crear una app que 
# haga algo más apropiado. Se encuentra en el archivo 
# '~/k8s_desarrolladores/03/work/src/hellocontainer/helloContainer.go'
#
# Lo editamos.

code ~/k8s_desarrolladores/03/work/src/helloContainer/helloContainer.go


# El programa hace lo siguiente:

# Líneas 1-9:       Declara módulos a usar.
#
# Línea 11:         Función 'main'. Es el punto de entrada a la aplicación.
#
# Líneas 12-15:     Inicializa la variable 'port' al valor '8080'. Si se pasa el valor del puerto
#                   como variable de entorno al iniciar la app, el código puede leer dicha variable
#                   y actualizar el puerto.
#
# Línea 17:         Instancia un objeto servidor web.
#
# Línea 18:         Asocia función de respuesta a evento. Si hay una request a la URI '/', el código
#                   llamará a la función 'helloContainer' para procesar dicha request.
#
# Línea 20:         Se muestra mensaje por la salida estándar.
#
# Línea 21 y 22:    Se inicia el servidor web. Cualquier error es guardado en el objeto 'err' y almacenado
#                   en el log.
#
# Línea 25:         Inicio de la función de respuesta a evento.
#
# Líneas 26-30:     Se disponen diversos mensajes, entre ellos el nombre del host, que serán mostrados en la response.
#
# Líneas 32-39:     Se leen todas las IPs asignadas al servidor que se mostrarán en la response.


# Salimos sin modificar y procedemos a compilar el programa

go install helloContainer


# Lanzamos la aplicación para probarla

helloContainer


# Abrimos otra consola, porque en la anterior se está ejecutando el servidor, y hacemos
# una request al puerto 8080.

curl localhost:8080


# La salida será similar a la siguiente, donde se muestra el nombre del host y las direcciones IPs asignadas.
#
# Hola Mundo!
# Version: 1.0.0
# Hostname: ubu
# Dirección IP: 192.168.1.45
# Dirección IP: 172.17.0.1
# Dirección IP: 172.18.0.1

# Cerramos la última consola y, paramos el servidor con CTRL+C.


#######################################
# Ejercicio 3: Contenerizar la app Go #
#######################################


# Vamos a contenerizar la app. Para ello nos colocamos en el directorio de contexto con el
# siguiente comando:

cd ~/k8s_desarrolladores/03/helloContainerCtx


# Copiamos la carpeta 'helloContainer' (que contiene 'helloContainer.go') a este directorio de contexto.

cp ~/k8s_desarrolladores/03/work/src/helloContainer/ .


# En el directorio de contexto tenemos un archivo Dockerfile que pasamos a detallar.

code ~/k8s_desarrolladores/03/helloContainerCtx/Dockerfile

