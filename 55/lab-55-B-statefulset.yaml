apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          # '-e' si algún comando falla, salimos del script.
          # '-x' Muestra por la salida estándar los comandos que se ejecutan.
          set -ex

          # Instalamos el comando 'hostname'.
          yum -y install hostname

          # Generamos el 'server-id' desde el ordinal del nombre del pod.
          # Si el nombre del pod termina en un número seguimos, sino salimos
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1 
          
          # REMATCH[1] tiene el ordinal del nombre del pod: (0, 1, 2, ...)
          ordinal=${BASH_REMATCH[1]}
          
          # Creamos la sección 'mysqld' en el archivo 'server-id.cnf'
          echo [mysqld] > /mnt/conf.d/server-id.cnf

          # Hacemos que los ordinales empiecen desde el 100, es decir, el 
          # ordinal '0' lo convertimos en 100. Para el '1', en '101', '2' en '102', etc.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          
          # Copiamos el archivo 'conf.d' apropiado desde el config-map y lo almacenamos en 
          # en emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi          
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          # '-e' si algún comando falla, salimos del script.
          # '-x' Muestra por la salida estándar los comandos que se ejecutan.
          set -ex

          # Si la instancia ya tiene el archivo de la base de datos, salimos sin hacer nada.
          [[ -d /var/lib/mysql/mysql ]] && exit 0

          # Si el nombre de la instancia no termina en un dígito (0, 1, 2, ...) salimos.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1

          # REMATCH[1] tiene el ordinal del nombre del pod: (0, 1, 2, ...)
          ordinal=${BASH_REMATCH[1]}

          # Si el el master (id '0') no clonamos la base de datos y, en consecuencia, salimos.
          [[ $ordinal -eq 0 ]] && exit 0

          # En este caso, el pod es una réplica y no tiene los archivos de la base de datos, así
          # que clonamos la base de datos desde el pod anterior.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          
          # Preparamos el backup recién recibido.
          xtrabackup --prepare --target-dir=/var/lib/mysql          
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Comprobamos si se pueden hacer consultas a través de TCP.
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          # '-e' si algún comando falla, salimos del script.
          # '-x' Muestra por la salida estándar los comandos que se ejecutan.
          set -ex

          # Cambiamos al directorio de archivos de la base de datos.
          cd /var/lib/mysql

          # Determina la posición del log (binlog) de los datos clonados (si los hubiera)
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup ha ya generado una consulta parcial "CHANGE MASTER TO" porque estamos
            # clonando desde una réplica existente. 
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            
            # Ignoramos xtrabackup_binlog_info en este caso porque no sirve de nada.
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # Estamos clonando directamente desde el primario (master). Parseamos la posición
            # del binlog.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Comprobamos si necesitamos completar una clonación iniciando la replicación.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Esperando a que mysqld acepte conexiones"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Inicializando replicación desde la posición de clonado"
            mysql -h 127.0.0.1 \
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='mysql-0.mysql', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            # En el caso de que se reinicie el contenedor, lo intentamos a lo sumo una sola vez.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          # Iniciamos un servidor para enviar backups cuando sean solicitados por los peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"          
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
