# Laboratorio 25: "Despliegue de archivos YAML"
 
# Este laboratorio aprenderemos a desplegar archivos YAML

# Requisitos:
#
#   1) Una máquina virtual con Ubuntu 20.04 LTS a la que poder hacer ssh.
#
#   2)  Tener instalado el runtime de podman. (ver lab-06-A.txt, Ejercicio 1 y 2)


##########################################################
# Ejercicio 1:  Aplicar un deployment desde archivo YAML #
##########################################################


# Como hemos aprendido, se puede usar 'kubectl' para crear objetos en el cluster de Kubernetes, pero es necesario
# escribir todos los parámetros y opciones en la línea de comandos. Esto resulta poco práctico.
#
# En realidad lo que se debe hacer es describir los objetos por medio de archivos de manifiesto, en formato YAML.
# Posteriormente usaremos el comando 'kubectl apply -f archivo.yaml' para crear o actualizar dichos objetos en el
# cluster.


# En la carpeta de los laboratorios del curso tenemos el archivo 'lab-20-B-nginx-deployment.yaml', que contiene
# la estructura básica de un deployment. Procedemos a abrir el archivo con el editor 'VSC' si se dispone de 
# interfaz gráfica, sino, otro a elección.

cd ~/k8s_desarrolladores/25

code lab-25-nginx-deployment.yaml

# La sintaxis y su interpretación para este archivo YAML es la siguiente:
#
# Línea 1:          Versión del lenguaje de manifiesto a usar.
#
# Linea 2:          Indicamos que vamos a crear un objeto de tipo 'deployment'.
#
# Líneas 3-6:       Establece el nombre del deployment ('nginx-deployment') y asigna una etiqueta (label) 'app: my-app'
#                   que podrá ser usada para asociar este deployment a otros objetos de k8s.
#
# Línea 12:         Empieza la definición de los contenedores que contendrá el pod.
#
# Líneas 13-15:     Se asigna una etiqueta para identificar el pod ('app: my-app')
#
# Línea 17:         Commienza la definición de los contenedores que contendrá el pod.
#
# Líneas 17-21:     Indicamos que existe un contenedor que se llama 'nginx', basado en la imagen 'nginx:1.16' y que
#                   abre el puerto 80.
#
# Línea 7:          Comienza la definición de la especificación de los pods del deployment.
#
# Líneas 9-11:      Asocia el pod con un conjunto de contenedores, definidos a partir de la línea 17. Se utiliza la 
#                   etiqueta 'app: my-app' para establecer la asociación.
#
# Línea 8:          Indica cuantos instancias de pod levantará el deployment (ReplicaSet).

# Una vez entendido el manifiesto, lo cerramos sin modificar.
# Ahora vamos a proceder a aplicar el manifiesto por medio de 'kubectl'

kubectl apply -f lab-20-B-nginx-deployment.yaml



# Procedemos a comprobar que se han creado el deployment, replicaset y pod

kubectl get all

# La salida del comando anterior debe ser parecida a esta:
#
# NAME                                    READY   STATUS    RESTARTS   AGE
# pod/nginx-deployment-6ff5b4564f-gdnst   1/1     Running   0          74s
#
# NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
# service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   8h
#
# NAME                               READY   UP-TO-DATE   AVAILABLE   AGE
# deployment.apps/nginx-deployment   1/1     1            1           74s
#
# NAME                                          DESIRED   CURRENT   READY   AGE
# replicaset.apps/nginx-deployment-6ff5b4564f   1         1         1       74s


# La gran ventaja de usar los archivos YAML es que la modificación de los objetos del cluster es
# muy simple. Para demostrarlo vamos a editar el archivo YAML y cambiar el número de replicas del 
# pod de 1 a 3.
#
# Editar el archivo y cambiar 'replicas: 1' por 'replicas: 3'. Salir y guardar el cambio.

nano lab-20-B-nginx-deployment.yaml


# Ahora volvemos a aplicar el archivo YAML. Observar cómo nos dice que es deployment ha sido configurado.

kubectl apply -f lab-20-B-nginx-deployment.yaml


# Comprobamos cuantas réplicas tiene el deployment

kubectl get deployment nginx-deployment


# La salida debe ser similar a esta:
#
# NAME               READY   UP-TO-DATE   AVAILABLE   AGE
# nginx-deployment   3/3     3            3           7m26s


# Comprobamos también los pods y los replicasets.

kubectl get pods

kubectl get replicasets


# Otra enorme ventaja de usar archivos YAML es que no solo sirve para crear/modificar objetos.
# También podemos eliminarlos muy facilmente con la opción 'delete':

kubectl delete -f lab-20-B-nginx-deployment.yaml


# Comprobamos que se ha borrado todo (Excepto el servicio 'Kubernetes')

kubectl get all



########################################################
# Ejercicio 2:  Aplicar un servicio desde archivo YAML #
########################################################




#######################
# FIN DEL LABORATORIO #
#######################
