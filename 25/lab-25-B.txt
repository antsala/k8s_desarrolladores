# Laboratorio 25-B: "Despliegue de MongoDB"
 
# Este laboratorio aprenderemos a desplegar MongoDB por medio de archivos YAML

# Requisitos:
#
#   1) Una máquina virtual con Ubuntu 20.04 LTS a la que poder hacer ssh.
#
#   2)  Tener instalado el runtime de podman. (ver lab-06-A.txt, Ejercicio 1 y 2)


#########################################
# Ejercicio 1:  Descripción del sistema #
#########################################


# Vamos a hacer un despliegue de MongoDB y Mongo-Express usando archivos YAML.
#
# MongoDB es el servidor de bases de datos que correrá en un contenedor dentro de un pod de Kubernetes
# al que llamaremos 'mongodb-deployment'.
#
# Mongo-Express es una interfaz gráfica de administración, que se corre en su propio pod.
#
# Con la idea de que el servidor MongoDB solo pueda ser administrado desde el pod de Mongo-Express, 
# implementaremos un servicio interno con nombre 'mongodb-service'.
# 
# Ver diapositiva 23. Despliegue de MongoDB-1
#
#
# Mongo-Express tendrá su propio pod y deployment, y para conectar con MongoDB, necesitará la URL
# de la base de datos, así como una credencial (usuario y password). La URL la almacenaremos en un
# Config Map, mientras que la credendial la guardaremos en un Secreto.
#
# Ver diapositiva 24. Despliegue de MongoDB-2
#
#
# Por último, para hacer accesible al usuario la conexión al pod Mongo-Express, pondremos un servicio
# externo, de tipo LoadBalancer.
#
# Ver diapositiva 25. Despliegue de MongoDB-3


################################################
# Ejercicio 2:  Crear la base de datos MongoDB #
################################################

# Para MongoDB usaremos la imagen 'mongo' presente en DockerHub. La documentación se encuentra en esta
# URL: https://hub.docker.com/_/mongo
#
# En la sección 'Environment Variables' se puede leer:
# (Nota: se muestra solo parte de la documentación)
#
# ...
# When you start the mongo image, you can adjust the initialization of the MongoDB instance by passing one 
# or more environment variables on the docker run command line. Do note that none of the variables below will 
# have any effect if you start the container with a data directory that already contains a database: any pre-existing
# database will always be left untouched on container startup.
#
# MONGO_INITDB_ROOT_USERNAME, MONGO_INITDB_ROOT_PASSWORD
# ...

# En consecuencia, a través de estas variables de entorno, podremos configurar las credenciales de la base de datos.


# Nos posicionamos en el directorio de trabajo:

cd ~/k8s_desarrolladores/25


# Abrimos el archivo que contiene el deployment de MongoDB.

code lab-25-B-mongodb.yaml

# Lo primero que debemos asimilar es que este archivo está dividido en dos partes.
# La línea 33 tiene '---'. En la sintaxis YAML esto indica que se está definiendo un objeto
# diferente.
#
# Por lo tanto, las líneas 1-32 definen el objeto 'mongodb-deployment', mientras que las líneas
# 34-44 definen el objeto 'mongodb-service'.
#
# Esta forma de definir los objetos es genial porque en un solo archivo tenemos todo lo necesario
# para que Kubernetes despliegue el Backend.

# El contenido de las líneas más relevantes del archivo YAML para el deployment es el siguiente:
#
# Línea 2:          Indicamos que es un deployment.
#
# Línea 4:          De nombre 'mongodb-deployment'.
#
# Línea 8:          El deployment tendrá un solo pod ('replicas: 1')
#
# Línea 16:         Empieza la definición de los contenedores que forman el pod (solo hay uno)
#
# Línea 18:         El contenedor se llamará 'mongodb'.
#
# Línea 19:         Y la imagen el 'mongo' (https://hub.docker.com/_/mongo)
#
# Línea 21:         El contenedor del servidor MongoDB trabaja en el puerto '27017'.
#
# Línea 22:         Importante. Es la primera vez que vamos a usar secretos de Kubernetes inyectados a través
#                   de variables de entorno.
#       
#                   La sección 'env:' indica que vamos a definir variables de entorno. Estas las podrá leer la
#                   aplicación que corre en el contenedor cuando éste se inicie.
#
# Línea 23:         La primera variable de entorno se llama 'MONGO_INITDB_ROOT_USERNAME', que como vimos en la 
#                   documentación (https://hub.docker.com/_/mongo) define el nombre de usuario administrador.
#
#                   Esta variable debe tener un valor. 
#
# Línea 24 y 25:    Indicamos que dicho valor se va a tomar desde un secreto de Kubernetes.
#
# Línea 26:         Indicamos el nombre del secreto, en este ejemplo 'mongodb-secret'. Este secreto debe existir en
#                   el cluster y estará definido en otro archivo YAML que deberá implementarse antes que este.
#
# Línea 27:         Un secreto puede contener una lista de parejas clave/valor. Por eso en esta línea indicamos el nombre
#                   de la clave 'mongodb-root-username', cuyo valor contendrá el nombre de usuario a utilizar.
#
#                   Nótese que en el archivo YAML es del todo imposible conocer cual es ese nombre de usuario. El uso de 
#                   secretos permite que el desarrollador no tenga porqué conocer esta información sensible. La unica persona
#                   que conocerá realmente este valor será el administrador del cluster, que es quien crea los secretos.
#
#                   (Nota: en este ejercicio también tenemos el rol de administrador del cluster, por lo que tendremos que
#                          crear los secretos. Se verá en breve)
#
# Líneas 28-32:     Se define la variable de entorno 'MONGO_INITDB_ROOT_PASSWORD', que de forma similar a las líneas anteriores,
#                   servirá para almacenar el password de MongoDB.


# Ahora procedemos a definir las líneas más relevantes del servicio interno.
#
# Línea 35:         El objeto es un servicio.
#
# Líneas 36 y 27:   En los metadatos vemos que apacere el nombre del servicio 'mongodb-service', pero NO aparece el parámetro
#                   'type: LoadBalancer', por lo tanto es un servicio interno.
#
# Líneas 39 y 40:   Se utiliza la etiqueta 'app: mongodb' como selector. Esta etiqueta es la misma que se ha declarado en el
#                   deployment y en el pod.
#
# Líneas 41-44:     Se usará protocolo de transporte TCP. El puerto externo del servicio es el '27017' y el tráfico sera reenviado
#                   al mismo puerto del (único) pod


# Aun no podemos aplicar este archivo porque daría un error al no existir el secreto 'mongodb-secret', por lo que procedemos a 
# crearlo.


################################################
# Ejercicio 3:  Crear un secreto en Kubernetes #
################################################

# Procedemos a crear el secreto que contendrá el usuario y el password de MongoDB.

# Abrimos el archivo 'lab-25-B-mongodb-secret-initial.yaml'
# (Nota: 'initial' quiere decir que tendremos que terminar su configuración siguiendo los password
#        del laboratorio)

code lab-25-B-mongodb-secret-initial.yaml






#######################
# FIN DEL LABORATORIO #
#######################
